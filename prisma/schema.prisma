datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  plants        Plant[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Plant {
  id                    String     @id @default(cuid())
  name                  String
  latinName             String
  commonName            String
  image                 String?
  description           String?
  logs                  PlantLog[]
  wateringFrequency     Int?
  luminosityThreshold   Int?
  temperatureThreshold  Int?
  waterQuantity         Int?
  humidityThreshold     Int?
  soilMoistureThreshold Int?
  createdAt             DateTime   @default(now()) @map(name: "created_at")
  updatedAt             DateTime   @updatedAt @map(name: "updated_at")
  user                  User?      @relation(fields: [userId], references: [id])
  userId                String?
}

model PlantLog {
  id              String   @id @default(cuid())
  luminosity      Int
  soilMoisture    Int
  temperature     Int
  humidity        Int
  waterLevelToLow Boolean
  wasWatered      Boolean
  needToWater     Boolean  @default(false)
  plantId         String   @map("plant_id")
  plant           Plant    @relation(fields: [plantId], references: [id])
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @updatedAt @map(name: "updated_at")
}
